# リバースプロキシ
# ふざけやがって...この設定どこにも載ってなかったじゃねぇかよおおおおお
upstream puma {
    server app:3000;
  }

server {
    # localhost:80で公開
    listen 80; # サーバ公開ポート
    server_name localhost; #localhost指定

    # ログを記録
    access_log /var/log/nginx/access.log;
    error_log  /var/log/nginx/error.log;

    # いちいち書くの面倒だからルート指定しちゃうze!!!
    root /app/public;

    # リバースプロキシ_リクエストヘッダ
    # ここでAPサーバに接続
    location @puma {
      proxy_set_header X-Real-IP  $remote_addr; # 直近のcrient IPを記録
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 送信元全てを記録
      proxy_set_header Host $http_host; # ホスト情報
      # プロキシ先、APサーバへのurl SSL？ nginxが処理するだけでいいだろ。 apとweb間だし。
      # ↑ え？railsのforce_sslが機能しないって？ はぁ、君のような勘のいいガキは嫌いだよ...。
      proxy_pass http://puma;
    }
    # ↑ここの情報調べれば調べるほど深みにはまる...沼注意

    # root/~へのアクセス時、ファイルがなければ@pumaに内部リダイレクト
    # 順次解釈ができるなんて聞いてませんわ。try_files便利すぎ問題。
    # 本番環境上げた時に備え、静的コンテンツはnginxから返すってことですよ。へへっ。
    # ↑とか言ってたら、docker-compose.ymlでバインディングするの忘れてました。1時間無駄にした。泣きたい。
    location / {
      try_files $uri @puma;
    }

    # アセットパイプライン
    location ~ ^/(assets|packs)/ {
      gzip_static on; # 圧縮済みファイルをそのままでスルーして、CPUリソースを削減
      expires max; # う〜ん。ブラウザキャッシュ残してはいるけど、今回に限っては必要ないかもなぁ...
      add_header Cache-Control public; # 全ファイルキャッシュ 一番緩そうなpublicに設定
    }

    # アイコン
    location = /favicon.ico {
      access_log off;
      log_not_found off;
    }

    # クローリング最適化
    location = /robots.txt  {
      access_log off;
      log_not_found off;
    }

    # 404 カスタムページ
    error_page 404 /404.html;
    location = /404.html {
    }

    # 500 カスタムページ
    error_page 500 502 503 504 /50x.html;
    location = /500.html {
    }
}